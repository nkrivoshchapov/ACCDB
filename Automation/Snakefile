#
# Copyright 2018 Roberto Peverati, Theoretical and Computational Chemistry Group at Florida Institute of Technology
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation version 3.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you are using this software for publishing scientific work, you should also cite the following reference:
# Morgante, P; Peverati, R.; SoftwareX, 2018, *submitted*
#
import csv
import re
import os
import glob
from operator import itemgetter
from datetime import timedelta
from shutil import copyfile
#
#    --- ACCDB WORKFLOW FILE ---
#
# This snakemake workflow file is to run all calculation on a specific database.
# Also, it can be used to gather and print all final energies.
#
# The most important things to check are:
# - All input files must be in xyz format and in the ./Geometries folder (this pathway is changeable in the config.yaml file associated).
#   xyz files must include charge and multiplicity information in the comment line (e.g. 0 1. Nothing else is allowed in this line).
#   The first line should be the number of atoms in the molecule. See the Geometries folder if you are not sure about how to format the files.
# - You need a quantum chemistry engine (Q-Chem and Gaussian are tested and the correct shell call is provided in the code below, 
# a few regex for extracting data are provided).
# - A template file for building the input for the qc engine must be given as qcengine.tmpl (see included example for q-chem and Gaussian).
# - Methods can be specified in the config.yaml under the key METHODS (HF, specifc XC functionals, etc.), as well as the basis set(s). 
# Other parameters can be coded in if needed.
# - Energies can be (re-)printed separately by calling 'snakemake ALL_ENERGY_PRINT'.
#
# The structure of the folders after a vanilla set of calculation looks as follows:
# Starting directory:
#    ./
# Initial geometries:
#    ./Geometries/
# Initial template:
#    ./qcengine.tmpl (several examples are provided)
# Main folder for each molecule:
#    ./output_DIR/{method}/{basis}/{molecule}/
# input/output and internal files:
#    ./output_DIR/{method}/{basis}/{molecule}/mol.in and mol.out
#    ./output_DIR/{method}/{basis}/{molecule}/.keep
# Specific rules for copying checkpoint files (or orbital files) should be coded in if needed.
#
# If you need more control (e.g. cluster support), you need to hardcode it in (see snakemake website for info).
#
configfile: "config.yaml"
#
def get_all_inputs():
#read all text files in MOL_LIST_DIR and cat them into a launch_list file containing the names of all molecules
    path = os.path.join(config["MOL_LIST_DIR"], "ASCDB_" + config['BASES'] + '.list')
    read_files=glob.glob(path)
    with open("launch_list", "w") as outfile:
        for f in read_files:
            with open(f, "r") as inputfile:
                outfile.write(inputfile.read())
    with open('launch_list') as f:
        molecule = f.read().splitlines()
    return molecule

wildcard_constraints:
     molecule='[-\w+=.]+',
     method='[-\w+=.]+',
     basis='[-\w]+',
     restriction='RHF|UHF',

# METHODS = ('B3LYP',)
METHODS = config['METHODS']

# BASES = ('def2QZVPPD',)
BASES = config['BASES']

# OTHERS can be anything you might need: RHF or UHF, different integration grids, and so on.
OTHERS = config['OTHERS']

# INPUTS_DIR = 'Geometries'
GEOMETRIES_DIR = config['GEOMETRIES_DIR']

OUTPUTS_DIR=config["OUTPUTS_DIR"]

# TEMPL1 = 'qcengine.tmpl'
TEMPL1 = config['TEMPL1']

# NUMBER OF PROCESSORS/CORES/THREADS
nproc = config['PROC']

ATOMS = {
"H":"1",
"He":"2",
"Li":"3",
"Be":"4",
"B":"5",
"C":"6",
"N":"7",
"O":"8",
"F":"9",
"Ne":"10",
"Na":"11",
"Mg":"12",
"Al":"13",
"Si":"14",
"P":"15",
"S":"16",
"Cl":"17",
"Ar":"18",
"Ca":"20",
"V":"23",
"Cr":"24",
"Fe":"26",
"Ni":"28",
"Co":"27",
"Cu":"29",
"Zn":"30",
"Se":"34",
"Br":"35",
"Kr":"36",
"Mo":"42",
"Ru":"44",
"Rh":"45",
"Pd":"46",
}

mrcc_avail = {
"def2-QZVP"       : True,
"def2-QZVPPD"     : False,
"def2-TZVP"       : True,
"cc-pVQZ"         : True,
"cc-pVTZ-DK"      : False,
"6-311pg_2df_2p"  : False,
"ma-TZVP"         : False,
"MG3S"            : False,
"BE13"            : False,
"BE17"            : False,
"BE4"             : False,
"cc-pCVQZ"        : False,
}

def get_energy(*path):
    "get calculated energies for molecule"
#
# Next section is for extraction of the results (energies). The correct regex should be selected in the configfile, based on each problem/database/qcengine
#

#ortus  st 2m32.031s
#hpc4 st /dev/shm 204.71 secs
#50GB 182.29 secs
#st drive 340.73 secs
    name = ""
    if "2p" in path:
        path = path[0], path[1].split("_6-311pg_2df")[0], "6-311pg_2df_2p", path[-1]
    p = os.listdir(os.path.join(*path))
    print(p)
    if "out.log" in p:
        name = "out.log" 
    else:
        name = path[-1] + ".out"
    print(name)
    with open(os.path.join(*path, name), 'r') as qcengine_out:
        lines = qcengine_out.readlines()
        enerline = ""
        for line in lines:
            if "SCF Done" in line:
                enerline = line
        if len(enerline) == 0:
            raise Exception("Didn't find SCF Done line")
        if "A.U." in enerline:
            return float(enerline.split("A.U.")[0].split("=")[1])
        else:
            return float(enerline.split("a.u.")[0].split("=")[1])

def ggen(mol, name):
    ans = ""
    t = mol.split("\n")
    while "" in t:
        t.remove("")
    # print(t)
    k = 0
    for i in range(len(t)):
        p = i + k
        while t[p][0] == " ":
            t[p] = t[p][1:]
            if len(t[p]) == 0:
                t = t[:p] + t[p+1:]
                k -= 1
                break
    # print(t)
    mol = t[1:]
    for at in mol:
        tmp = at.split(" ")
        att = tmp[0]
        if att[0] in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            ans += "Qq " + att + " " + " ".join(tmp[1:]) + "\n"
        else:
            if len(att) == 2:
                att = att[0].upper() + att[1].lower()
            else:
                att = att[0].upper()
            ans += att + " " + ATOMS[att] + " " + " ".join(tmp[1:]) + "\n"

    oth = t[0]
    oth = oth.split(" ")
    charge = int(oth[0].replace(",", ""))
    mult = int(oth[1])

    print("FILE ", name, "Le", len(mol))

    return ans, charge, mult, str(len(mol))

rule ALL:
    input:
        expand('{out_DIR}/{method}/{basis}/{molecule}/{molecule}.out', molecule=get_all_inputs(), method=METHODS, basis=BASES, out_DIR=OUTPUTS_DIR),

rule ALL_ENERGY_PRINT:
#This rule is called to print the .csv file with all the final energies.
    input:
        expand('{method}_{basis}_energy.csv', method=METHODS, basis=BASES),

rule ENERGY_PRINT:
#This rule is the one that extracts all the results from the output files.
    output:     '{method}_{basis}_energy.csv'
    run:
        out_DIR=OUTPUTS_DIR
        with open(output[0], 'w', newline='') as output_file:
            energy_data = csv.writer(output_file, dialect='excel')
            fieldnames = ['Molecules', 'Calc_energy',]
            # energy_data.writerow(fieldnames)
            with open('launch_list') as f:
                for line in f:
                    molecule = line.replace('\n', '')
                    path = (out_DIR, wildcards.method, wildcards.basis, molecule)
                    try:
                        energy_data.writerow((
                        molecule,
                        get_energy(*path)
                        ))
                    except (FileNotFoundError, IndexError) as e:
                        print(e)

rule QCENGINE_RUN:
#This rule calls the program.
    input:      '{out_DIR}/{method}/{basis}/{molecule}/inpfile.gjf'
    output:     '{out_DIR}/{method}/{basis}/{molecule}/{molecule}.out'
    run:
        shell(config["QCENGINE_CALL"])

rule QCENGINE_INPUT:
#This rule writes the input file for the program of choice, based on the template given in the configfile
    input:      '{out_DIR}/{method}/{basis}/{molecule}/.keep'
    output:     '{out_DIR}/{method}/{basis}/{molecule}/inpfile.gjf'
    run:
        for file_name in output:
            molecule = wildcards.molecule
            method = wildcards.method.split('_')[0]
            # set method: useful to change some keywords according to your program's syntax.
            # set template
            template = TEMPL1
            df = "#"
            #    template = TEMPL2
            # copyfile("SLURM.tmpl", file_name[:-4] + "SLURM.slurm")
            with open('tolaunch/{molecule}.xyz'.format(molecule=wildcards.molecule), 'r') as f:
                f.readline()                   # skip first line
                molecule_data = f.read()[:-1]  # skip last NL
                molecule_datag, charge, mult, n_at = ggen(molecule_data, molecule)
            basis_kw = "GEN"
            if not mrcc_avail[wildcards.basis]:
                fb = open("basis/" + wildcards.basis + ".gbs", "r").read()
                atoms = []
                xyzlines = molecule_data.split("\n")
                #print(repr(xyzlines))
                for line in xyzlines[1:]:
                    if line.lower().islower():
                        atname = line.split()[0]
                        if atname not in atoms:
                            atoms.append(atname)
                #print("Atoms = "+repr(atoms))
                fbparts = fb.split("****")
                for i, fbpart in reversed(list(enumerate(fbparts))):
                    good = False
                    for atom in atoms:
                        if fbpart.startswith(atom+" ") or fbpart.startswith("\n"+atom+" "):
                            good = True
                            #print("atom=%s Remained part %s" % (repr(atom), repr(fbpart[:20])))
                            break
                        #else:
                        #    print("atom=%s Will not do part %s" % (repr(atom), repr(fbpart[:20])))
                    if not good:
                        del fbparts[i]
                fb = ("****".join(fbparts)+"****").lstrip("\n")
            else:
                fb = ""
                if wildcards.basis == "def2-QZVP":
                    basis_kw = "Def2QZVP"
                elif wildcards.basis == "def2-TZVP":
                    basis_kw = "Def2TZVP"
                elif wildcards.basis == "cc-pVQZ":
                    basis_kw = "cc-pVQZ"
            with open(file_name, 'w') as f:
                f.write(open(template).read().format(
                    basis=basis_kw,
                    method=method,
                    molecule=molecule,
                    molecule_data=molecule_data,
                    molecule_xyz=n_at + "\n" + molecule_data,
                    molecule_datag=molecule_datag[:-1],
                    charge=charge,
                    mult=mult,
                    nproc=nproc,
                    df=df,
                    fullbasis=fb
                ))
            with open(file_name[:-4] + "SLURM.slurm", 'w') as f:
                f.write(open("SLURM.tmpl").read().format(
                    molecule=molecule,
                    nproc=nproc,
                ))

rule LAUNCH_DIR:
#This rule copies the xyz from the source folder to the 'tolaunch' directory.
      input:      GEOMETRIES_DIR + '/{molecule}.xyz'
      output:     'tolaunch/{molecule}.xyz'
      run:
                  shell('cp {input} {output}')

rule QCENGINE_DIRS:
#This rule builds the input and output files.
    input:      'tolaunch' + '/{molecule}.xyz'
    output:     '{out_DIR}/{method}/{basis}/{molecule}/.keep'
    shell:      'touch {output}'

